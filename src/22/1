#include <Arduino.h>

28 52 37 14 64 20 01 19


28 FA ED 23 64 20 01 C9 
#include "PCF8575.h"  // https://github.com/xreef/PCF8575_library
 
// Set i2c address
PCF8575 PCF(0x20); 


  lcd.setCursor(12, 2);
   lcd.print("T-");
   lcd.setCursor(15, 2);
   lcd.print(Temperatura, 2);


   
   if (b.beginRow()) {

  b.Slider(&ventob0).label(F("ОБОРОТЫ-0")).color(gh::Colors::Blue).size(1).range(50, 80, 1);
   b.endRow();   }
        if (b.beginRow()) {
   b.Slider(&ventob1).label(F("ОБОРОТЫ-1")).color(gh::Colors::Blue).size(1).range(80, 100, 1);
    b.endRow();   }
        if (b.beginRow()) {
    b.Slider(&ventob2).label(F("ОБОРОТЫ-2")).color(gh::Colors::Blue).size(1).range(90, 120, 1);
     b.endRow();   }
        if (b.beginRow()) {
     b.Slider(&ventob3).label(F("ОБОРОТЫ-3")).color(gh::Colors::Blue).size(1).range(100, 150, 1);
      b.endRow();   }
        if (b.beginRow()) {
      b.Slider(&ventob4).label(F("ОБОРОТЫ-4")).color(gh::Colors::Blue).size(1).range(110, 180, 1);

       b.endRow();   }
        if (b.beginRow()) {
       b.Slider(&ventob5).label(F("ОБОРОТЫ-5")).color(gh::Colors::Blue).size(1).range(120, 200, 1);
        b.endRow();   }
        if (b.beginRow()) {
        b.Slider(&ventob6).label(F("ОБОРОТЫ-6")).color(gh::Colors::Blue).size(1).range(130, 220, 1);
         b.endRow();   }
        if (b.beginRow()) {
         b.Slider(&ventob7).label(F("ОБОРОТЫ-7")).color(gh::Colors::Blue).size(1).range(140, 255, 1);
          b.endRow();   }
        if (b.beginRow()) {
          b.Slider(&ventob8).label(F("ОБОРОТЫ-8")).color(gh::Colors::Blue).size(1).range(150, 255, 1);

       b.endRow();
    }
 if (b.beginRow()) {
          b.Slider(&ventob9).label(F("ОБОРОТЫ-9")).color(gh::Colors::Blue).size(1).range(160, 255, 0.5);

       b.endRow();
    }



#include <microDS3231.h>
MicroDS3231 rtc;

//YWROBOT
//Compatible with the Arduino IDE 2.0
//Library version:1.1
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 16 chars and 2 line display
const int capteur_D = 2;
const int capteur_A = 0;

const int UTECHKA_PIN = 5;
int val_utechka;
int val_utechkaD;
#include <TimerMs.h>
// (период, мс), (0 не запущен / 1 запущен), (режим: 0 период / 1 таймер)
TimerMs tmr(5000, 1, 1);
TimerMs dolivpause(300000, 1, 1);
TimerMs textp(5000, 1, 0);


int value = 0;
unsigned long next_time; // время очередного переключения первого светодиода
int timeout = 2500; // половина периода мигания
//int led_state = 0; // начальное состояние светодиода - выключен
void setup()
{ 
  // pcf8575.begin();
   PCF.begin();
  lcd.begin(SDA, SCL); //initialize 1602  LiquidCrystal_I2C::begin(int8_t sda, int8_t scl) 
  // Print a message to the LCD.
  lcd.backlight();
  lcd.setCursor(0,0);
  lcd.print("Hello, world!");
  lcd.setCursor(0,1);
  lcd.print("by EasyIoT");
// pinMode(4, INPUT);
// pinMode(5, INPUT);
// pinMode(0, INPUT);
// pinMode(2, INPUT);

 Serial.begin(115200);
  
  // проверка наличия модуля на линии i2c
  if (!rtc.begin()) {
    Serial.println("DS3231 not found");
    for(;;);
  }

  // получаем все данные в структуру
  DateTime now = rtc.getTime();

  // меняем любой параметр
  now.year += 5;
  // now.second;
  // now.minute;
  // now.hour;
  // now.day;
  // now.date;
  // now.month;

  // отправляем в rtc
  rtc.setTime(now);

void loop()
{
   lcd.clear();
//   delay(1000);
    lcd.setCursor(0,0);
  lcd.print(rtc.getTimeString());
//   int val_utechka1=analogRead(capteur_A);

//     int dolivSENS = digitalRead(doliv_sens);

//  int waterSENS = digitalRead(waterSENS_PIN);
//   int podachawater = digitalRead(Water_PIN);
  
//   bool polivpompa = digitalRead(POLIV_Pompa); 

// bool dolivpompa = digitalRead(doliv_pompa);
  
  lcd.setCursor(0,1);
  lcd.print(val_utechka1);
  lcd.setCursor(0,2);
  lcd.print(dolivSENS);
  lcd.setCursor(0,3);
  lcd.print(waterSENS);
  // lcd.setCursor(0,4);
  // // lcd.print(podachawater);
  // lcd.setCursor(0,5);
  // lcd.print(polivpompa);
   if (textp.tick()){ 
    tmr = millis();
  Serial.print("Reserv sens"); 
 Serial.println(waterSENS); // Выводим значение в мониторе порта
  Serial.print("Reserv klapan");
// Serial.println(podachawater); // Выводим значение в мониторе порта

Serial.print("");



  Serial.print("HyDro sens"); 
  Serial.println(dolivSENS); // Выводим значение в мониторе порта
 Serial.print("Hydro pompa doliv-");
 Serial.println(dolivpompa); // Выводим значение в мониторе порта
 Serial.print("Pompa Poliv"); 
 Serial.println(polivpompa); 

  if(digitalRead(capteur_D) == HIGH) 
  {
     digitalWrite(UTECHKA_PIN, LOW); 
    
    Serial.print("Утечки НЕТ"); 
 
  }
else
  {
    digitalWrite(UTECHKA_PIN, HIGH); 
    Serial.print("УТЕЧКА ВОДЫ");
   
  };
val_utechka=analogRead(capteur_A); 
 Serial.print("____Значение датчика утечки:");
 Serial.print(val_utechka); 
 Serial.println("");
     static uint32_t tmr;
  if (millis() - tmr >= 500) {
 tmr = millis();  };
int now_time = millis(); // текущее время
    if( now_time >= next_time ){ // если текущее время превысило намеченное время, то
        next_time = now_time + timeout; // вычисляем время следующего переключения
     };


// if (grelka == 1) {
// //Lcd. fillCircle(240, 39, 7, RED);
// }
// if (grelka == 0) {
// //Lcd. fillCircle(240, 39, 7, BLUE);
// };




   }};

