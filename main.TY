
// FULL DEMO

// WiFi
#include <Arduino.h>
#define AP_SSID "TP-LINK"
#define AP_PASS "214365Qq"
#define WIFI_TIMEOUT_MS 20000
#define WIFI_NETWORK "TP-LINK"
#define WIFI_PASSWORD "214365Qq"
// базовый пример работы с библиотекой, основные возможности. Загрузи и изучай код

// логин-пароль от роутера
#include <LittleFS.h>
#define GH_FS LittleFS

// #define GH_NO_PORTAL
#define GH_INCLUDE_PORTAL
#include <GyverHub.h>

// GyverHub hub;
GyverHub hub("MyDevices2", "ESP", "");  // можно настроить тут, но без F-строк!
/// ====== НАСТРОЙКИ КОМПИЛЯЦИИ ======
//#define ATOMIC_FS_UPDATE  // OTA обновление GZIP файлом
#define GH_ASYNC          // использовать ASYNC библиотеки

// отключение модулей
//#define GH_NO_PORTAL    // открытие сайта из памяти esp
//#define GH_NO_WS        // WebSocket
//#define GH_NO_MQTT      // MQTT
//#define GH_NO_FS        // работа с файлами (включая ОТА!)
//#define GH_NO_OTA       // ОТА файлом с приложения
//#define GH_NO_OTA_URL   // ОТА по URL
// =================================
// GH_MOD_INFO     // разрешить вкладку инфо
// GH_MOD_FSBR     // разрешить вкладку менеджера файлов
// GH_MOD_FORMAT   // разрешить форматирование FS
// GH_MOD_DOWNLOAD // разрешить скачивание
// GH_MOD_UPLOAD   // разрешить загрузку
// GH_MOD_OTA      // разрешить ОТА
// GH_MOD_OTA_URL  // разрешить ОТА по URL
// GH_MOD_REBOOT   // разрешить перезагрузку из инфо
// GH_MOD_SET      // разрешить установку значений
// GH_MOD_READ     // разрешить чтение
// GH_MOD_DELETE   // разрешить удаление файлов
// GH_MOD_RENAME   // разрешить переименование файлов

// GH_MOD_SERIAL   // разрешить Serial
// GH_MOD_BT       // разрешить Bluetooth
// GH_MOD_WS       // разрешить WebSocket
// GH_MOD_MQTT     // разрешить MQTT
// выключить менеджер файлов и кнопку переименования файлов

// hub.modules.unset(GH_MOD_FSBR | GH_MOD_RENAME);

// // разрешить связь по WS
// hub.modules.set(GH_MOD_WS);


// иконки
// https://fontawesome.com/v5/cheatsheet/free/solid
// https://fontawesome.com/v5/search?o=r&m=free&s=solid

#include "ThingSpeak.h"

#define CHANNEL_ID 1551807
#define CHANNEL_API_KEY "EZVNSKEUD4RWXAAD"


#define CHANNEL_ID2 1628917
#define CHANNEL_API_KEY2 "R5VFO73Q37GESE3V"


WiFiClient client;


 #include "PCF8575.h"

 // Set i2c address
 PCF8575 pcf8575(0x20);
 PCF8575 pcf85752(0x21);

 float Temperatura= 25.5;


 float vent0=25.0;
 float vent1=25.5;
 float vent2=26.0;
 float vent3=26.3;
 float vent4=26.5;
 float vent5=27.0;
 float vent6=27.5;
 float vent7=28.0;
 float vent8=28.5;

 float ventel=0 ;


 int timePoliv = 40000;
 int timeDoliv = 180000;


 #include <microDS3231.h>
 MicroDS3231 rtc;


 #include <Wire.h>
 #include <LiquidCrystal_I2C.h>

 LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 16 chars and 2 line display
 const int capteur_D = 19;
 const int capteur_A = 15;

 const int UTECHKA_PIN = 5;
 int val_utechka;
 int val_utechkaD;
 #include <TimerMs.h>
 #include "GyverTimer.h"
 // (период, мс), (0 не запущен / 1 запущен), (режим: 0 период / 1 таймер)
 TimerMs tmr(5000, 1, 0);
 // TimerMs dolivpause(3000, 1, 1);
 TimerMs textp(3000, 1, 0);
 TimerMs tmrWF(20000, 1, 1);
 // TimerMs WATERPING(5000, 1, 0);

 GTimer dolivpause(MS);  // можно сразу указать период (по умолч. в режиме интервала)
 GTimer polivtimer(MS);  // можно сразу указать период (по умолч. в режиме интервала)


 // int value = 0;
 unsigned long next_time; // время очередного переключения первого светодиода
 int timeout = 2500; // половина периода мигания
 //int led_state = 0; // начальное состояние светодиода - выключен


 int DP=1;
 // int grelka_PIN;
 int grelka;



 // Текущее состояние сенсора
 bool SensorStateWS = HIGH;
 // Время начала смены
 unsigned long SensorStartChangeWS = 0;
 // Защитный интервал между сменами состояния
 unsigned long TIMEOUTWS = 1000;
 // Текущее время
 unsigned long CurrentTimeWS = 0;



 // Текущее состояние сенсора
 bool SensorStateDS = HIGH;
 // Время начала смены
 unsigned long SensorStartChangeDS = 0;
 // Защитный интервал между сменами состояния
 unsigned long TIMEOUTDS = 2000;
 // Текущее время
 unsigned long CurrentTimeDS = 0;

 // Пример использования библиотеки GyverButton, все возможности в одном скетче.
 // автоматический тик


 #include "Button2.h"

 // Button2 button;
 byte pin = 13;
 /////////////////////////////////////////////////////////////////

 Button2 button;
  #define BUTTON_PIN  13


 #include <OneWire.h>
 #include <DallasTemperature.h>

 #define ONE_WIRE_BUS 0

OneWire oneWire(ONE_WIRE_BUS);

DallasTemperature sensors(&oneWire);

 DeviceAddress outsideThermometer = { 0x28, 0x2B, 0xC0, 0x57, 0x4, 0xE1, 0x3C, 0x1E };
DeviceAddress  insideThermometer  = { 0x28, 0x57, 0xF, 0x57, 0x4, 0xE1, 0x3C, 0xB6 };

   float Wtemp; // temperature in Celsius
 int dolivSENS;
 int waterSENS;
 int podachawater;
 int polivpompa;

 float poliv;


  int dolivpompa;
 float Rtemp; // temperature in Celsius

 #include "GyverFilters.h"
 GFilterRA analog35;    // фильтр назовём analog0

 const int voltPin = 35;
// int adcValue;
 // variable for storing the potentiometer value
 float voltValue;
 float adcValue=0;
 float filtrvolt;


// билдер
void build(GH::Builder& b) {
    // =================== КОНТЕЙНЕРЫ ===================

   if (b.beginRow()) {
    // Wtemp=25.5;
        b.Label_(F("Wtemp")).label("Wtemp").size(2).valueFloat(Wtemp);  // с указанием стандартного значения

        // if (b.Button().size(1).click()) {
        //     hub.update(F("label")).valueInt(random(100, 500));
        // }
 b.Label_(F("Rtemp")).label("Rtemp").size(2).valueFloat(Rtemp);  // с указанием стандартного значения

        b.endRow();
    };


   if (b.beginRow()) {
        b.Label_("ventel").label("ventel").size(2).valueInt(ventel);  // с указанием стандартного значения

        // if (b.Button().size(1).click()) {
        //     hub.update(F("label")).valueInt(random(100, 500));
        // }
 b.Label_("grelka").label("grelka").size(2).valueInt(grelka);  // с указанием стандартного значения

        b.endRow();

    };


      if (b.beginRow()) {
        b.Label_("filtrvolt").label("filtrvolt").size(2).valueFloat(adcValue);  // с указанием стандартного значения

        // if (b.Button().size(1).click()) {
        //     hub.update(F("label")).valueInt(random(100, 500));
        // }
 b.Label_("polivpompa").label("polivpompa").size(2).valueInt(polivpompa);  // с указанием стандартного значения

        b.endRow();
    };

 if (b.beginRow()) {
        b.Label_("НИЖНИЙ").label("НИЖНИЙ").size(2).valueInt(dolivSENS);  // с указанием стандартного значения

        // if (b.Button().size(1).click()) {
        //     hub.update(F("label")).valueInt(random(100, 500));
        // }
 b.Label_("ВЕРХНИЙ").label("ВЕРХНИЙ").size(2).valueInt(waterSENS);  // с указанием стандартного значения

        b.endRow();
    };



// if (b.beginRow()) {
//         b.Label_("долив").label("долив").size(2).valueInt(!dolivpompa);  // с указанием стандартного значения

//         // if (b.Button().size(1).click()) {
//         //     hub.update(F("label")).valueInt(random(100, 500));
//         // }
//  b.Label_("Подача воды").label("Подача").size(2).valueInt(podachawater);  // с указанием стандартного значения

//         b.endRow();
//     };

    if (b.beginRow()) {
        // библиотека позволяет подключить к активному виджету переменную для чтения и записи
        // я создам статические переменные для ясности. Они могут быть глобальными и так далее
        // таким образом изменения останутся при перезагрузке страницы
      

        // для подключения нужно передать переменную по адресу
        // библиотека сама определит тип переменной и будет брать из неё значение и записывать при действиях
        // библиотека поддерживает все стандартные типы данных, а также некоторые свои (Pairs, Pos, Button, Log...)
        b.Slider(&Temperatura).size(2).label("Temperatura");
    Serial.print(Temperatura);

        b.endRow();
    };
// if (b.beginRow()) {
//         b.Label_("УТЕЧКА ВОДЫ").label("УТЕЧКА ВОДЫ").size(2).valueInt(dolivpompa);  // с указанием стандартного значения

//         // if (b.Button().size(1).click()) {
//         //     hub.update(F("label")).valueInt(random(100, 500));
//         // }
//  b.Label_("voltValue").label("voltValue").size(2).valueFloat(voltValue);  // с указанием стандартного значения

    //     b.endRow();
    // }



    //  b.Title_(F("title"));
    // =================== ИНФО О БИЛДЕ ===================

    // можно получить информацию о билде и клиенте для своих целей
    // поставь тут 1, чтобы включить вывод =)
    if (1) {
        // запрос информации о виджетах
        if (b.build.isUI()) {
            Serial.println("=== UI BUILD ===");
        }

        // действие с виджетом
        if (b.build.isSet()) {
            Serial.println("=== SET ===");
            Serial.print("name: ");
            Serial.println(b.build.name);
            Serial.print("value: ");
            Serial.println(b.build.value);
        }

        Serial.print("client from: ");
        Serial.println(GH::readConnection(b.build.client.connection));
        Serial.print("ID: ");
        Serial.println(b.build.client.id);
        Serial.println();
    };
}



// обработчик кнопки (см. ниже)
void btn_cb() {
    Serial.println("click 4");
}

// обработчик кнопки с информацией о билде (см. ниже)
void btn_cb_b(GH::Build& b) {
    Serial.print("click 5 from client ID: ");
    Serial.println(b.client.id);
}




 void pressed(Button2& btn) {
     Serial.println("pressed");
    	// pcf8575.digitalWrite(P3, LOW);
     poliv=1;
 //  dolivpause.setTimeout(timeDoliv);       //  пауза долива и подогрева
 //   polivtimer.setTimeout(timePoliv);

 }
 void released(Button2& btn) {
     Serial.print("released: ");
     Serial.println(btn.wasPressedFor());
    
           	// pcf8575.digitalWrite(P3, LOW);
 //  dolivpause.setTimeout(timeDoliv);       //  пауза долива и подогрева
 //   polivtimer.setTimeout(timePoliv);
 }
 void changed(Button2& btn) {
     Serial.println("changed");
 }
 void click(Button2& btn) {
     Serial.println("click\n");
         poliv=1;
        	// pcf8575.digitalWrite(P3, LOW);
 //  dolivpause.setTimeout(timeDoliv);       //  пауза долива и подогрева
 //   polivtimer.setTimeout(timePoliv);
 }
 void longClickDetected(Button2& btn) {
     Serial.println("long click detected");
     poliv=0;
 }
 void longClick(Button2& btn) {
     Serial.println("long click\n");
         poliv=0;
    	// pcf8575.digitalWrite(P3, HIGH);
 }
 void doubleClick(Button2& btn) {
     Serial.println("double click\n");
         poliv=1;
         // pcf8575.digitalWrite(P3, LOW);

 //  dolivpause.setTimeout(timeDoliv);       //  пауза долива и подогрева
 //   polivtimer.setTimeout(timePoliv);
 }
 void tripleClick(Button2& btn) {
     Serial.println("triple click\n");
     Serial.println(btn.getNumberOfClicks());
         poliv=0;
 }
 void tap(Button2& btn) {
     Serial.println("tap");
     poliv=1;
 }




void setup() {
    Serial.begin(115200);

  sensors.begin();
 
   lcd.begin(SDA, SCL); //initialize 1602  LiquidCrystal_I2C::begin(int8_t sda, int8_t scl)
   // Print a message to the LCD.
   lcd.backlight();
   lcd.setCursor(0, 0);
   lcd.print("Hello, world!");
   lcd.setCursor(0, 1);
   lcd.print("by EasyIoT");
 // sensors.begin();
  Serial.begin(115200);
    Serial.print("Locating devices...");
   Serial.print("Found ");
   // Serial.print(sensors.getDeviceCount(), DEC);
   Serial.println(" devices.");

    // start serial port

   Serial.println("Dallas Temperature IC Control Library Demo");



    // подключение к роутеру
    WiFi.mode(WIFI_STA);
    WiFi.begin(AP_SSID, AP_PASS);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println();
    Serial.println(WiFi.localIP());



     button.begin(BUTTON_PIN);
     // pinMode(BUTTON_PIN);
   button.setLongClickTime(3000);
   button.setDoubleClickTime(300);
  button.setChangedHandler(changed);
    button.setPressedHandler(pressed);
   button.setReleasedHandler(released);

   // button.setTapHandler(tap);
   button.setClickHandler(click);
   button.setLongClickDetectedHandler(longClickDetected);
   button.setLongClickHandler(longClick);
   button.setLongClickDetectedRetriggerable(false);
  
   button.setDoubleClickHandler(doubleClick);
   button.setTripleClickHandler(tripleClick);



  
 pcf8575.begin();
  pcf85752.begin();

 // установка коэффициента фильтрации (0.0... 1.0). Чем меньше, тем плавнее фильтр
   analog35.setCoef(0.01);

   // установка шага фильтрации (мс). Чем меньше, тем резче фильтр
   analog35.setStep(10);
 // #define P00  	0
 // 	#define P01  	1
 // 	#define P02  	2
 // 	#define P03  	3
 // 	#define P04  	4
 // 	#define P05  	5
 // 	#define P06  	6
 // 	#define P07  	7
 // 	#define P10  	8
 // 	#define P11  	9
 // 	#define P12  	10
 // 	#define P13  	11
 // 	#define P14  	12
 // 	#define P15  	13
 // 	#define P16  	14
 // 	#define P17  	15
 	pcf8575.pinMode(P0, OUTPUT);
   pcf8575.pinMode(P1, OUTPUT);
   pcf8575.pinMode(P2, OUTPUT);
   pcf8575.pinMode(P3, OUTPUT);
   pcf8575.pinMode(P4, OUTPUT);
   pcf8575.pinMode(P5, OUTPUT);
   pcf8575.pinMode(P6, OUTPUT);
   pcf8575.pinMode(P7, OUTPUT);
   pcf8575.pinMode(P8, OUTPUT);
   pcf8575.pinMode(P9, OUTPUT);

 pcf8575.pinMode(P10, OUTPUT);
 pcf8575.pinMode(P11, OUTPUT);
 pcf8575.pinMode(P12, OUTPUT);
 pcf8575.pinMode(P15, OUTPUT);
 pcf8575.pinMode(P14, OUTPUT);
 pcf8575.pinMode(P13, OUTPUT);

 pcf8575.digitalWrite(P0, HIGH);


 	pcf8575.digitalWrite(P1, HIGH);



 	pcf8575.digitalWrite(P2, HIGH);

 	pcf8575.digitalWrite(P3, HIGH);
	
 	pcf8575.digitalWrite(P4, HIGH);

 	pcf8575.digitalWrite(P5, HIGH);

 	pcf8575.digitalWrite(P6, HIGH);

 	pcf8575.digitalWrite(P7, HIGH);

 	pcf8575.digitalWrite(P8, HIGH);

 	pcf8575.digitalWrite(P9, HIGH);


   	pcf8575.digitalWrite(P10, HIGH);

   	pcf8575.digitalWrite(P11, HIGH);

 	pcf8575.digitalWrite(P12, HIGH);

      	pcf8575.digitalWrite(P13, HIGH);

     	pcf8575.digitalWrite(P14, HIGH);

     	pcf8575.digitalWrite(P15, HIGH);



 	pcf85752.pinMode(P0, OUTPUT);
   pcf85752.pinMode(P1, OUTPUT);
   pcf85752.pinMode(P2, OUTPUT);
   pcf85752.pinMode(P3, OUTPUT);
   pcf85752.pinMode(P4, OUTPUT);
   pcf85752.pinMode(P5, OUTPUT);
   pcf85752.pinMode(P6, OUTPUT);
   pcf85752.pinMode(P7, OUTPUT);
   pcf85752.pinMode(P8, OUTPUT);
   pcf85752.pinMode(P9, OUTPUT);

 pcf85752.pinMode(P10, OUTPUT);
 pcf85752.pinMode(P11, OUTPUT);
 pcf85752.pinMode(P12, OUTPUT);
 pcf85752.pinMode(P15, OUTPUT);
 pcf85752.pinMode(P14, OUTPUT);
 pcf85752.pinMode(P13, OUTPUT);



 pcf85752.digitalWrite(P0, HIGH);


 	pcf85752.digitalWrite(P1, HIGH);



 	pcf85752.digitalWrite(P2, HIGH);

 	pcf85752.digitalWrite(P3, HIGH);
	
 	pcf85752.digitalWrite(P4, HIGH);

 	pcf85752.digitalWrite(P5, HIGH);

 	pcf85752.digitalWrite(P6, HIGH);

 	pcf85752.digitalWrite(P7, HIGH);

 	pcf85752.digitalWrite(P8, HIGH);

 	pcf85752.digitalWrite(P9, HIGH);


   	pcf85752.digitalWrite(P10, HIGH);

   	pcf85752.digitalWrite(P11, HIGH);

 	pcf85752.digitalWrite(P12, HIGH);

      	pcf85752.digitalWrite(P13, HIGH);

     	pcf85752.digitalWrite(P14, HIGH);

     	pcf85752.digitalWrite(P15, HIGH);

   // Serial.println(" Longpress Time:\t" + String(button.getLongClickTime()) + "ms");
   // Serial.println(" DoubleClick Time:\t" + String(button.getDoubleClickTime()) + "ms");
   // Serial.println();

   

 // tmrWF.setTimerMode();
 tmrWF.setPeriodMode();
 // tmr.setPeriodMode();
 // tmr2.setPeriodMode();
 // textp.setPeriodMode();


    // настройка таймаута на удержание (по умолчанию 500 мс)




  //  sensor_inhouse.begin();
  //  sensor_outhouse.begin();
   // проверка наличия модуля на линии i2c
  rtc.begin();
   
 pinMode(4, INPUT); // СЕНСОР ДОЛИВА
 pinMode(17, INPUT);    // СЕНСОР ПОДАЧИ ВОДЫ (ВЕРХ)
 pinMode(19, INPUT); //sens 1
 pinMode(15, INPUT);

  rtc.setTime(BUILD_SEC, BUILD_MIN, BUILD_HOUR, BUILD_DAY, BUILD_MONTH, BUILD_YEAR);

  

   lcd.clear();

//   connectToWiFi(); // this function comes from a previous video
  
   ThingSpeak.begin(client);



    // если нужен MQTT - подключаемся
    // hub.mqtt.config("test.mosquitto.org", 1883);
    // hub.mqtt.config("afb5ea25a0be4d7cb58d35609fb182de.s2.eu.hivemq.cloud", 8883, "Wootang", "398958qq");

    // ИЛИ

    // режим точки доступа
    // WiFi.mode(WIFI_AP);
    // WiFi.softAP("My Hub");
    // Serial.println(WiFi.softAPIP());    // по умолч. 192.168.4.1


    // указать префикс сети, имя устройства и иконку
    hub.config(F("TP-LINK"), F("ESP32"), F(""));

    // подключить билдер
    hub.onBuild(build);

    // запуск!
    hub.begin();
}

void loop() {
    

  DateTime now = rtc.getTime();
   button.loop();


 val_utechkaD = digitalRead(19);



       dolivSENS = digitalRead(4);

   waterSENS = digitalRead(17);

adcValue = analogRead(35);



     podachawater =  pcf8575.digitalRead(P1);
       polivpompa = !pcf8575.digitalRead(P3);
    dolivpompa = pcf8575.digitalRead(P8);






     lcd.setCursor(0,0);
   lcd.print(rtc.getTimeString());
   





 // Устанавливаем текущее время
   CurrentTimeWS = millis();
   // считываем сенсор
   boolean CurrentStateWS = waterSENS;
   // если текущее состояние сенсора отличается считанного
   if (CurrentStateWS != SensorStateWS) {
     // если отсчет таймера смены состояния не начат, начинаем
     if (SensorStartChangeWS == 0) SensorStartChangeWS = CurrentTimeWS;
     // если новое состояние приняло свое значение за время большее чем время таймаута
     if (CurrentTimeWS - SensorStartChangeWS > TIMEOUTWS) {
         // меняем состояние сенсора
         SensorStateWS=!SensorStateWS;
         // сбрасываем время начала смены состояния
         SensorStartChangeWS = 0;
         // если текущее состояние сенсора 1, то включаем светодиод
         if(SensorStateWS){
           	pcf8575.digitalWrite(P1, HIGH);
         // если текущее состояние сенсора 0, то выключаем светодиод
         }else{
          pcf8575.digitalWrite(P1, LOW);
         }
     }
   // смена состояния не состоялась, сбрасываем таймер
   }else{
     SensorStartChangeWS = 0;
   };


 // Устанавливаем текущее время
   CurrentTimeDS = millis();
   // считываем сенсор
   boolean CurrentStateDS = dolivSENS;
   // если текущее состояние сенсора отличается считанного
   if (CurrentStateDS != SensorStateDS) {
     // если отсчет таймера смены состояния не начат, начинаем
     if (SensorStartChangeDS == 0) SensorStartChangeDS = CurrentTimeDS;
     // если новое состояние приняло свое значение за время большее чем время таймаута
     if (CurrentTimeDS - SensorStartChangeDS > TIMEOUTDS) {
         // меняем состояние сенсора
         SensorStateDS=!SensorStateDS;
         // сбрасываем время начала смены состояния
         SensorStartChangeDS = 0;
         // если текущее состояние сенсора 1, то включаем светодиод
         if(SensorStateDS){
           	pcf8575.digitalWrite(P8, HIGH);
         // если текущее состояние сенсора 0, то выключаем светодиод
         }else{
          pcf8575.digitalWrite(P8, LOW);
         }
     }
   // смена состояния не состоялась, сбрасываем таймер
   }else{
     SensorStartChangeDS = 0;
   };



 if (poliv==1) {
     // Serial.println("poliv on");
    pcf8575.digitalWrite(P3, LOW);
   };

 if (poliv==0) {
     // Serial.println("poliv oFF");
    pcf8575.digitalWrite(P3, HIGH);
   };


  sensors.requestTemperatures();
   float Wtempl=sensors.getTempC(insideThermometer);


  float Rtempl=sensors.getTempC(outsideThermometer);

 voltValue = 3.6320 * ((adcValue * 3.3) / 4095);
   // voltValue = 3.047 * ((adcValue * 3.7875) / 4095);
   filtrvolt = analog35.filteredTime(voltValue);
  if  (Wtempl >=10 && Wtempl <=50) {
 Wtemp = Wtempl;};

 if  (Rtempl >=10 && Rtempl <=50) {
 Rtemp = Rtempl;};


 if (tmr.tick()){

 
 
 float grelkatime = now.hour;
  if (grelkatime >=10.00 && grelkatime <=21.00){
     if (Wtemp < Temperatura && Wtemp >= 11) {
   	pcf8575.digitalWrite(P2, LOW);
     grelka = 1;
     //  Serial.println(grelkatime);
   }
     else  {
   	pcf8575.digitalWrite(P2, HIGH);
     grelka = 0;

   }
  };


 };






    if (Rtemp <= vent0 && Rtemp <= vent1 ) {
 ventel=0;
     Serial.println("VENT-0");
         lcd.setCursor(10, 3);
   lcd.print("V-0");
  
   };

     if (Rtemp >= vent1 && Rtemp <= vent2 ) {
   ventel=1;
      Serial.println("VENT-1");
        lcd.setCursor(10, 3);
   lcd.print("V-1");

   };

  if (Rtemp >= vent2 && Rtemp <= vent3) {
 ventel=2;;
         Serial.println("VENT-2");
             lcd.setCursor(10, 3);
   lcd.print("V-2");
            

   };

  if (Rtemp >= vent3 && Rtemp <= vent4) {
 ventel=3;
         Serial.println("VENT-3");
        
   lcd.setCursor(10, 3);
   lcd.print("V-3");
 

 
   };


    if (Rtemp >= vent4 && Rtemp <= vent5) {
 	ventel=4;
         Serial.println("VENT-4");
        
     lcd.setCursor(10, 3);
   lcd.print("V-4");
 

 
   };


    if (Rtemp >= vent5 && Rtemp <= vent6) {
 	ventel=5;
         Serial.println("VENT-5");
        
    lcd.setCursor(10, 3);
   lcd.print("V-5");
 

 
   };



    if (Rtemp >= vent6 && Rtemp <= vent7) {
   	ventel=6;
         Serial.println("VENT-6");
              lcd.setCursor(10, 3);
   lcd.print("V-6");

    };
    




     if (Rtemp >= vent7 && Rtemp <= vent8) {
 	ventel=7;
         Serial.println("VENT-7");
        
       lcd.setCursor(10, 3);
   lcd.print("V-7");
     };


  if (Rtemp >=vent8) {
 	ventel=8;
         Serial.println("VENT-8");
        
       lcd.setCursor(10, 3);
   lcd.print("V-8");




   };
   

 






  
   
 if (tmrWF.tick()){

   Serial.println("SENDED");

  ThingSpeak.setField(1, Wtemp);
   ThingSpeak.setField(2, Rtemp);
    ThingSpeak.setField(3, waterSENS);
   ThingSpeak.setField(4, dolivSENS);

    ThingSpeak.setField(5, grelka);
   ThingSpeak.setField(6, podachawater);
    ThingSpeak.setField(7, dolivpompa);
  ThingSpeak.setField(8, polivpompa);

   ThingSpeak.writeFields(CHANNEL_ID, CHANNEL_API_KEY);


  ThingSpeak.setField(1, ventel);
   ThingSpeak.setField(2, filtrvolt);
    ThingSpeak.setField(3, waterSENS);
   ThingSpeak.setField(4, dolivSENS);

    ThingSpeak.setField(5, grelka);
   ThingSpeak.setField(6, podachawater);
    ThingSpeak.setField(7, dolivpompa);
   ThingSpeak.setField(8, ventel);
 //  ThingSpeak.setField(9, ventel);
   ThingSpeak.writeFields(CHANNEL_ID2, CHANNEL_API_KEY2);


  if (ventel == 0) {
   pcf8575.digitalWrite(P9, HIGH);
 	pcf8575.digitalWrite(P15, HIGH);
      pcf8575.digitalWrite(P14, HIGH);
     pcf8575.digitalWrite(P13, HIGH);
       Serial.println("VENTEL0");
  
   };

   if (ventel == 1) {
     pcf8575.digitalWrite(P9, LOW); //2.4
 pcf8575.digitalWrite(P15, HIGH); // 1.96
     pcf8575.digitalWrite(P14, HIGH); // 1.80
     pcf8575.digitalWrite(P13, HIGH); // 1.61
     Serial.println("VENTEL1");
   
 };

     if (ventel == 2) {
     pcf8575.digitalWrite(P9, HIGH); //2.4
 pcf8575.digitalWrite(P15, LOW); // 1.96
     pcf8575.digitalWrite(P14, HIGH); // 1.80
     pcf8575.digitalWrite(P13, HIGH); // 1.61
     Serial.println("VENTEL2");
    
 };
       if (ventel == 3) {
             pcf8575.digitalWrite(P9, HIGH); //2.4
 pcf8575.digitalWrite(P15, HIGH); // 1.96
     pcf8575.digitalWrite(P14, LOW); // 1.80
     pcf8575.digitalWrite(P13, HIGH); // 1.61
     Serial.println("VENTEL3");

 };

         if (ventel == 4) {
      pcf8575.digitalWrite(P9, HIGH); //2.4
 pcf8575.digitalWrite(P15, HIGH); // 1.96
     pcf8575.digitalWrite(P14, HIGH); // 1.80
     pcf8575.digitalWrite(P13, LOW); // 1.61
     Serial.println("VENTEL4");
  
 };
           if (ventel == 5) {
                 pcf8575.digitalWrite(P9, LOW); //2.4
 pcf8575.digitalWrite(P15, LOW); // 1.96
     pcf8575.digitalWrite(P14, HIGH); // 1.80
     pcf8575.digitalWrite(P13, HIGH); // 1.61
     Serial.println("VENTEL5");
   
 };
             if (ventel == 6) {
                   pcf8575.digitalWrite(P9, LOW); //2.4
 pcf8575.digitalWrite(P15, HIGH); // 1.96
     pcf8575.digitalWrite(P14, HIGH); // 1.80
     pcf8575.digitalWrite(P13, LOW); // 1.61
     Serial.println("VENTEL6");
 
 };

             if (ventel == 7) {
                  pcf8575.digitalWrite(P9, HIGH); //2.4
 pcf8575.digitalWrite(P15, LOW); // 1.96
     pcf8575.digitalWrite(P14, LOW); // 1.80
     pcf8575.digitalWrite(P13, LOW); // 1.61
     Serial.println("VENTEL7");

 };

  if (ventel == 8) {
                  pcf8575.digitalWrite(P9, LOW); //2.4
 pcf8575.digitalWrite(P15, LOW); // 1.96
     pcf8575.digitalWrite(P14, LOW); // 1.80
     pcf8575.digitalWrite(P13, LOW); // 1.61
     Serial.println("VENTEL8");

 };

 };
  if (textp.tick()){
     Serial.println(voltValue);
  Serial.println("   ");
 Serial.println(adcValue);

   Serial.println();


  if  (Wtemp >=10) {
     Serial.print("Sensor W(*C): ");
   Serial.print(Wtemp, 2);
 
   };
   Serial.println();

  if  (Rtemp >=10) {
     Serial.print("Sensor R(*C): ");
   Serial.print(Rtemp, 2);
   };
 

 Serial.println();









   lcd.setCursor(0 ,2);
   lcd.print("WS-");
   lcd.setCursor(3, 2);
   lcd.print(waterSENS);

     lcd.setCursor(0, 3);
   lcd.print("DS-");
   lcd.setCursor(3, 3);
   lcd.print(dolivSENS);

  lcd.setCursor(10, 0);
   lcd.print("W-");
   lcd.setCursor(12, 0);
   lcd.print(Wtemp, 2);

   lcd.setCursor(0,1);
   lcd.print("220-");
   lcd.setCursor(4,1);
   lcd.print(val_utechkaD);

  lcd.setCursor(10, 1);
   lcd.print("R-");
   lcd.setCursor(12, 1);
   lcd.print(Rtemp, 2);




     lcd.setCursor(10,2);
   lcd.print("v-");
   lcd.setCursor(12,2);
   lcd.print(filtrvolt, 4);


   

  Serial.print("Кипятильник-");
  if  (grelka ==1) {
     Serial.println("ВКЛ ");
  
   }
     else  {
       Serial.println("ВЫКЛ ");
   };


 Serial.print("СЕНСОР НИЖНИЙ УРОВНЯ ВОДЫ--");
  if  (dolivSENS == 1) {
     Serial.println(" ВКЛ ");
  
   }
     else  {
       Serial.println(" ВЫКЛ ");
   };




 Serial.print("СЕНСОР ВЕРХНИЙ УРОВНЯ ВОДЫ---");
  if  (waterSENS == 1) {
     Serial.println(" ВКЛ ");
  
   };
    if  (waterSENS == 0) {
       Serial.println(" ВЫКЛ ");
   };


 Serial.print("Помпа на долив--");
  if  (dolivpompa ==0) {
     Serial.println(" ВКЛ ");
  
   }
     else  {
       Serial.println(" ВЫКЛ ");
   };

 Serial.print("Помпа на Полив--");
  if  (polivpompa ==0) {
     Serial.println(" ВКЛ ");
  
   }
     else  {
       Serial.println(" ВЫКЛ ");
   };

 Serial.print("Подача воды с фильтра--");
  if  (podachawater ==0) {
     Serial.println(" ВКЛ ");
  
   }
     else  {
       Serial.println(" ВЫКЛ ");
   };




 Serial.print("переменная долива--");
  if  (DP >=0) {
     Serial.println(" ВКЛ ");
  
   }
     else  {
       Serial.println(" ВЫКЛ ");
   };

 if(digitalRead(19) == 0)
   {
  	pcf8575.digitalWrite(P4, LOW);
     Serial.println("УТЕЧКА ВОДЫ/220 ОБЕСТОЧЕНО");
     Serial.println(" ");
   };


 if(digitalRead(19) == 1)
   {
   	pcf8575.digitalWrite(P4, HIGH);
     Serial.println("УТЕЧКИ ВОДЫ НЕТ");
     Serial.println(" ");
   };

   };
 // =================== ТИКЕР ===================
    // вызываем тикер в главном цикле программы
    // он обеспечивает работу связи, таймаутов и прочего
    hub.tick();
// GyverHub::update(float&(adcValue));
    // =========== ОБНОВЛЕНИЯ ПО ТАЙМЕРУ ===========
    // в библиотеке предусмотрен удобный класс асинхронного таймера
    static GH::Timer tmrg(1000);  // период 1 секунда


    // каждую секунду будем обновлять заголовок
    if (tmrg) {
        hub.update(F("Wtemp")).valueFloat(Wtemp);
          hub.update(F("Rtemp")).valueFloat(Rtemp);
        // Serial.println(adcValue);
//  hub.sendUpdate(Rtemp, Wtemp, adcValue);

    };
static GH::Timer tmrg2(1000);  // период 1 секунда
if (tmrg2) {
//  hub.sendUpdate("Wtemp");
// hub.upd.send();
//   hub.update(F("Wtemp")).valueFloat(millis());
//   hub.update("Rtemp");
//    hub.update("adcValue");
//  hub.update("ventel");
//   hub.sendUpdate("Wtemp"), valueFloat(Wtemp);
//           hub.sendUpdate(F("Rtemp")).valueFloat(Rtemp);
//  hub.sendUpdate("adcValue"), valueFloat(adcValue);
  //  hub.sendUpdate("Wtemp");
  //  hub.sendUpdate("adcValue");
  //  hub.sendUpdate("Rtemp");
  //  hub.sendUpdate("ventel");
  //  hub.sendGet("Wtemp");
  //    hub.sendGet("Rtemp");
  //      hub.send
  // hub.sendGet("Wtemp");

};

}





// // Include the libraries we need
// #include <OneWire.h>
// #include <DallasTemperature.h>

// // Data wire is plugged into port 2 on the Arduino
// #define ONE_WIRE_BUS 2
// #define TEMPERATURE_PRECISION 9

// // Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
// OneWire oneWire(ONE_WIRE_BUS);

// // Pass our oneWire reference to Dallas Temperature.
// DallasTemperature sensors(&oneWire);

// // arrays to hold device addresses
// DeviceAddress insideThermometer, outsideThermometer;

// // Assign address manually. The addresses below will need to be changed
// // to valid device addresses on your bus. Device address can be retrieved
// // by using either oneWire.search(deviceAddress) or individually via
// // sensors.getAddress(deviceAddress, index)
// // DeviceAddress insideThermometer = { 0x28, 0x1D, 0x39, 0x31, 0x2, 0x0, 0x0, 0xF0 };
// // DeviceAddress outsideThermometer   = { 0x28, 0x3F, 0x1C, 0x31, 0x2, 0x0, 0x0, 0x2 };

// void setup(void)
// {
//   // start serial port
//   Serial.begin(9600);
//   Serial.println("Dallas Temperature IC Control Library Demo");

//   // Start up the library
//   sensors.begin();

//   // locate devices on the bus
//   Serial.print("Locating devices...");
//   Serial.print("Found ");
//   Serial.print(sensors.getDeviceCount(), DEC);
//   Serial.println(" devices.");

//   // report parasite power requirements
//   Serial.print("Parasite power is: ");
//   if (sensors.isParasitePowerMode()) Serial.println("ON");
//   else Serial.println("OFF");

//   // Search for devices on the bus and assign based on an index. Ideally,
//   // you would do this to initially discover addresses on the bus and then
//   // use those addresses and manually assign them (see above) once you know
//   // the devices on your bus (and assuming they don't change).
//   //
//   // method 1: by index
//   if (!sensors.getAddress(insideThermometer, 0)) Serial.println("Unable to find address for Device 0");
//   if (!sensors.getAddress(outsideThermometer, 1)) Serial.println("Unable to find address for Device 1");

//   // method 2: search()
//   // search() looks for the next device. Returns 1 if a new address has been
//   // returned. A zero might mean that the bus is shorted, there are no devices,
//   // or you have already retrieved all of them. It might be a good idea to
//   // check the CRC to make sure you didn't get garbage. The order is
//   // deterministic. You will always get the same devices in the same order
//   //
//   // Must be called before search()
//   //oneWire.reset_search();
//   // assigns the first address found to insideThermometer
//   //if (!oneWire.search(insideThermometer)) Serial.println("Unable to find address for insideThermometer");
//   // assigns the seconds address found to outsideThermometer
//   //if (!oneWire.search(outsideThermometer)) Serial.println("Unable to find address for outsideThermometer");

//   // show the addresses we found on the bus
//   Serial.print("Device 0 Address: ");
//   printAddress(insideThermometer);
//   Serial.println();

//   Serial.print("Device 1 Address: ");
//   printAddress(outsideThermometer);
//   Serial.println();

//   // set the resolution to 9 bit per device
//   sensors.setResolution(insideThermometer, TEMPERATURE_PRECISION);
//   sensors.setResolution(outsideThermometer, TEMPERATURE_PRECISION);

//   Serial.print("Device 0 Resolution: ");
//   Serial.print(sensors.getResolution(insideThermometer), DEC);
//   Serial.println();

//   Serial.print("Device 1 Resolution: ");
//   Serial.print(sensors.getResolution(outsideThermometer), DEC);
//   Serial.println();
// }

// // function to print a device address
// void printAddress(DeviceAddress deviceAddress)
// {
//   for (uint8_t i = 0; i < 8; i++)
//   {
//     // zero pad the address if necessary
//     if (deviceAddress[i] < 16) Serial.print("0");
//     Serial.print(deviceAddress[i], HEX);
//   }
// }

// // function to print the temperature for a device
// void printTemperature(DeviceAddress deviceAddress)
// {
//   float tempC = sensors.getTempC(deviceAddress);
//   if (tempC == DEVICE_DISCONNECTED_C)
//   {
//     Serial.println("Error: Could not read temperature data");
//     return;
//   }
//   Serial.print("Temp C: ");
//   Serial.print(tempC);
//   Serial.print(" Temp F: ");
//   Serial.print(DallasTemperature::toFahrenheit(tempC));
// }

// // function to print a device's resolution
// void printResolution(DeviceAddress deviceAddress)
// {
//   Serial.print("Resolution: ");
//   Serial.print(sensors.getResolution(deviceAddress));
//   Serial.println();
// }

// // main function to print information about a device
// void printData(DeviceAddress deviceAddress)
// {
//   Serial.print("Device Address: ");
//   printAddress(deviceAddress);
//   Serial.print(" ");
//   printTemperature(deviceAddress);
//   Serial.println();
// }

// /*
//    Main function, calls the temperatures in a loop.
// */
// void loop(void)
// {
//   // call sensors.requestTemperatures() to issue a global temperature
//   // request to all devices on the bus
//   Serial.print("Requesting temperatures...");
//   sensors.requestTemperatures();
//   Serial.println("DONE");

//   // print the device information
//   printData(insideThermometer);
//   printData(outsideThermometer);
// }

// //  ROM = 28 2B C0 57 4 E1 3C 1E ROM = 28 57 F 57 4 E1 3C B6